name: Deploy Production

on:
  workflow_dispatch:
  push:
    tags: ["v*.*.*"]

env:
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

jobs:
  version:
    runs-on: ubuntu-latest

    environment:
      name: production

    outputs:
      deploy_version: ${{ steps.vars.outputs.deploy_version }}
      deploy_message: ${{ steps.vars.outputs.deploy_message }}

    steps:
      - name: Variables
        id: vars
        run: |
          export tmp_version=$(echo production-${{github.ref_name}}-ci-build-${{github.run_number}}-${{github.run_attempt}} | sed 's/[^0-9,a-z,A-Z]/\-/g')
          export tmp_version_message=$(echo \"$tmp_version / triggered by ${{ github.event_name }}\")
          echo "deploy_version=$tmp_version" >> $GITHUB_OUTPUT
          echo "deploy_message=$tmp_version_message" >> $GITHUB_OUTPUT

  build:
    needs: version
    runs-on: ubuntu-latest

    environment:
      name: production

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "19.x"
          cache: "npm"

      - uses: actions/cache@v3
        id: cache-dependencies
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm ci
        env:
          CI: ""

      - name: Build
        run: npm run build --if-present
        env:
          CI: ""

      - name: Archive Build output
        uses: actions/upload-artifact@v3
        if: success()
        with:
          name: Build output
          path: build

  deploy:
    needs: [version, build]
    runs-on: ubuntu-latest

    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: Build output
          path: build

      - name: Deploy Production
        id: deploy
        if: success()
        run: |
          npm install wrangler
          export OUTPUT=$(npx wrangler pages publish build --branch=main --project-name=robarroyo --commit-message=${{ needs.version.outputs.deploy_message }})
          export URL=$(echo $OUTPUT | grep -Eo 'https://[^ >]+' | head -1)
          echo "url=$URL" >> $GITHUB_OUTPUT
